#include <stdarg.h>
#include <unistd.h>
#include "ft_printf.h"
#include <limits.h>

// void    ft_putchar(char c)
// {
//     write(1, &c, 1);
// }

// void putnbr_helper(int n)
// {
//     if (n == -2147483648)
//         write(1, "-2147483648", 11);
//     else if (n < 0)
//        {
//             n = -n;
//             write(1, "-", 1);
//         }
//         else if (n >= 10)
//         {
//             putnbr_helper(n / 10);
//             ft_putchar(n % 10 + 48);
//         }
//         else
//             ft_putchar(n + 48);
// }
// void ft_putstr(char *s, int *count)
// {
//     while(*s)
//     {
//         *count = write(1, s, 1);
//         s++;
//     }
// }

// void ft_putnbr(char *n, ...)
// {
//     int i = 0;
//     va_list arg;

//     va_start(arg, n);
//     while (n[i])
//     {
//         if(n[i] == '-')
//            putnbr_helper(va_arg(arg, int));
//         else
//             write(1,&n[i],1);  
//         i++;  
//     }
    
//     va_end(arg);
// }

// int main()
// {
//     // ft_putnbr("vvvv -c",5);
//     printf("\n%d\n",printf("%s","jjjjjj"));
// }




int sum_numbers(int num, ...)
{
    int sum;
    va_list args;
    va_start(args, num);

    sum = 0;
    while (num > 0)
    {
        sum += va_arg(args, int);
        num--;
    }

    va_end(args);
    return (sum);
}

// int main()
// {
//     printf("%d", sum_numbers(3, 1, 2, 3));
// }
int main(void)
{   
	int i;
	int len;
    int len2;
    unsigned int ui;
    void *addr;
    char *str = NULL;

    len = ft_printf("Let's try to printf a simple sentence.\n");
    len2 = printf("Let's try to printf a simple sentence.\n");
    printf("============================================================\n");
    ui = (unsigned int)INT_MAX + 1024;
    addr = (void *)0x7ffe637541f0;
    ft_printf("Length:[%d, %i]\n", len2, len2);
    printf("Length:[%d, %i]\n", len2, len2);
    printf("============================================================\n");
    ft_printf("Negative:[%d]\n", -762534);
    printf("Negative:[%d]\n", -762534);
    printf("============================================================\n");
    ft_printf("Unsigned:[%u]\n", ui);
    printf("Unsigned:[%u]\n", ui);
    printf("============================================================\n");
    ft_printf("Unsigned hexadecimal:[%x, %X]\n", ui, ui);
    printf("Unsigned hexadecimal:[%x, %X]\n", ui, ui);
    printf("============================================================\n");
    ft_printf("Character:[%c]\n", 'H');
    printf("Character:[%c]\n", 'H');
    printf("============================================================\n");
    ft_printf("String:[%s]\n", "I am a string !");
    printf("String:[%s]\n", "I am a string !");
    printf("============================================================\n");
    ft_printf("Address:[%p]\n", addr);
    printf("Address:[%p]\n", addr);
    printf("============================================================\n");
    len = ft_printf("Percent:[%%]\n");
    len2 = printf("Percent:[%%]\n");
    ft_printf("Len:[%d]\n", len2);
    printf("Len:[%d]\n", len);
    printf("============================================================\n");
    ft_printf("%s\n", str);
    printf("%s\n", str);
    printf("============================================================\n");
    len = ft_printf("%");
    len2 = printf("%");
    printf("============================================================\n");
    len = ft_printf("%m\n");
    len2 = printf("%m\n");
    ft_printf("len[%d] == len[%d]\n", len, len2);
    printf("len[%d] == len[%d]\n", len, len2);
    printf("============================================================\n");
    printf("%d\n", ft_printf("%p\n", NULL));
    printf("%d\n", printf("%p\n", NULL));
    printf("============================================================\n");
    printf("%d\n", ft_printf("%p\n", " "));
    printf("%d\n", printf("%p\n", " "));
    printf("============================================================\n");
    ft_printf("%d%dd%d\n", 1, 2, -3);
    printf("%d%dd%d\n", 1, 2, -3);
    return (0);
}